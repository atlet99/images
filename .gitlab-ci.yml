stages:
  - build
  - push

variables:
  IMAGE_TAG:
    value: "stable"
    description: "default tag for used version of image"
  CONTAINER_CONFIG:
    value: "/kaniko/.docker/config.json"
    description: "config file path"
  HELMFILE_VERSION:
    value: 0.170.0
    description: "helmfile release version"
  HELM_VERSION:
    value: 3.17.0
    description: "helm release version"
  SOPS_VERSION:
    value: 3.9.3
    description: "sops release version"
  KUBECTL_VERSION:
    value: 1.30.4
    description: "kubectl cli release version"
  TERRAFORM_VERSION:
    value: 1.9.8
    description: "terraform cli release version"
  HELMSMAN_APP_VERSION:
    value: 3.17.1
    description: "helmsman cli release version"
  HELM_DIFF:
    value: 3.6.0
    description: "helm-diff plugin release for helmfile"
  HELM_GIT:
    value: 1.3.0
    description: "helm-git plugin release for helmfile"
  HELM_S3:
    value: 0.16.2
    description: "helm-s3 plugin release for helmfile"
  HELM_SECRETS:
    value: 4.6.2
    description: "helm-secrets plugin release for helmfile"
  NGINX_VERSION:
    value: 1.27.3
    description: "nginx source package version"
  OPENSSL_VERSION:
    value: 3.4.0
    description: "openssl source package version"

default:
  interruptible: true
  retry:
    max: 2
    when:
      - runner_system_failure
      - api_failure
  tags:
    - nodb
  timeout: 15m
before_script:
  - mkdir -p /kaniko/.docker
  - echo "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$(echo -n ${CI_REGISTRY_USER}:${CI_REGISTRY_PASSWORD} | base64 | tr -d '\n')\"}}}" > $CONTAINER_CONFIG

.build_template: &build_template
  image:
    name: gcr.io/kaniko-project/executor:v1.23.1-debug
    entrypoint: [ "" ]
  script:
    - |      
      BUILD_ARGS_RAW=$(echo "${BUILD_ARGS}" | tr '\n' ' ')
      FULL_IMAGE="$CI_REGISTRY_IMAGE/${IMAGE_NAME}:${IMAGE_TAG}"
      echo "Building and pushing image: $FULL_IMAGE"
      
      if [[ -n "$BUILD_ARGS" ]]; then
        echo "Using build args: $BUILD_ARGS"
        /kaniko/executor \
          --insecure-registry \
          --skip-tls-verify-registry \
          --context "${BUILD_CONTEXT}" \
          --dockerfile "$DOCKERFILE_PATH" \
          --destination "$FULL_IMAGE" \
          $BUILD_ARGS_RAW
      else
        echo "No build args provided"
        /kaniko/executor \
          --insecure-registry \
          --skip-tls-verify-registry \
          --context "${BUILD_CONTEXT}" \
          --dockerfile "$DOCKERFILE_PATH" \
          --destination "$FULL_IMAGE"
      fi

push_ansible_image_stable:
  <<: *build_template
  stage: push
  variables:
    IMAGE_NAME: "ansible"
    IMAGE_TAG: "stable"
    BUILD_CONTEXT: "$CI_PROJECT_DIR"
    DOCKERFILE_PATH: "$CI_PROJECT_DIR/ansible.Dockerfile"
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "master"'
      when: always

push_deployer_image_stable:
  <<: *build_template
  stage: push
  variables:
    IMAGE_NAME: "deployer"
    IMAGE_TAG: "stable"
    BUILD_CONTEXT: "$CI_PROJECT_DIR"
    DOCKERFILE_PATH: "$CI_PROJECT_DIR/deployer.Dockerfile"
    BUILD_ARGS: --build-arg HELMFILE_VERSION=$HELMFILE_VERSION --build-arg HELM_VERSION=$HELM_VERSION --build-arg SOPS_VERSION=$SOPS_VERSION --build-arg KUBECTL_VERSION=$KUBECTL_VERSION --build-arg TERRAFORM_VERSION=$TERRAFORM_VERSION --build-arg HELMSMAN_APP_VERSION=$HELMSMAN_APP_VERSION --build-arg HELM_DIFF=$HELM_DIFF --build-arg HELM_GIT=$HELM_GIT --build-arg HELM_S3=$HELM_S3 --build-arg HELM_SECRETS=$HELM_SECRETS
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "master"'
      when: always

push_kaniko_image_stable:
  <<: *build_template
  stage: push
  variables:
    IMAGE_NAME: "kaniko"
    IMAGE_TAG: "stable"
    BUILD_CONTEXT: "$CI_PROJECT_DIR"
    DOCKERFILE_PATH: "$CI_PROJECT_DIR/kaniko.Dockerfile"
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "master"'
      when: always

push_nginx_image_stable:
  <<: *build_template
  stage: push
  variables:
    IMAGE_NAME: "nginx"
    IMAGE_TAG: "stable"
    BUILD_CONTEXT: "$CI_PROJECT_DIR"
    DOCKERFILE_PATH: "$CI_PROJECT_DIR/nginx.Dockerfile"
    BUILD_ARGS: --build-arg NGINX_VERSION=$NGINX_VERSION --build-arg OPENSSL_VERSION=$OPENSSL_VERSION
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "master"'
      when: always